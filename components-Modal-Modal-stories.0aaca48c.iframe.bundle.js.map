{"version":3,"file":"components-Modal-Modal-stories.0aaca48c.iframe.bundle.js","mappings":";;;;;AAUA;AACA;;;AAKA;;;;;;;;;AAmBA;AC/BA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;;AAeA;ACfA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAsBA","sources":["webpack://ursa-react/./src/components/Modal/Modal.tsx","webpack://ursa-react/./src/components/Button/Button.tsx","webpack://ursa-react/./src/components/Typography/Typography.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport { Button } from '../Button/Button';\nimport styled from 'styled-components';\nimport { HeadingType, Typography } from '../Typography/Typography';\n\nconst StyledModal = styled.div`\n    overflow: auto;\n    display: block;\n    background: #FFF;\n    padding: 1rem;\n    border-radius: ${(props) => props.theme.borderRadius};\n    box-shadow: 0px 0px 0.03rem 0.12rem ${(props) => props.theme.colors.primary};\n    margin: 4rem auto;\n    max-width: 80%;\n`;\n\nconst StyledContainer = styled.div`\n    height: 100%;\n    left: 0;\n    overflow: auto;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 1050;\n    background: #80808094;\n`;\n\nexport interface ModalProps {\n    id?: string;\n    modalTitle?: string | undefined;\n    children?: ReactNode;\n    visible?: boolean;\n    onClose?: () => void;\n}\n\nconst Modal = ({ id, modalTitle, children, visible, onClose }: ModalProps) => {\n\n    return (\n        <>\n            {visible && (\n                <StyledContainer>\n                    <StyledModal id={id}>\n                        {modalTitle && <Typography type={HeadingType.H4} content={modalTitle} />}\n                        <Button id='close' type='button' onClick={onClose}>Close</Button>\n                        {children}\n                    </StyledModal>\n                </StyledContainer>\n            )}\n        </>\n    );\n};\n\nModal.defaultProps = {\n    visible: true,\n};\n\nexport { Modal };\n\n\n\n\n\n","import React, { FormEventHandler, MouseEventHandler, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`  \n  background: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0)), ${(props) => props.theme.colors.primary};\n  border: none;\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: #FFFFFF;\n  padding: .7rem 1.5rem;\n  cursor: pointer;\n  transition: background 1s;\n\n  &:focus-visible {\n      outline: 2px solid #101820;\n  }\n\n  &:disabled {\n      background-color: gray;\n      color: #FFFFFF;\n      border-color: gray;\n  }\n\n  &:hover:enabled {\n    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)), ${(props) => props.theme.colors.primary};\n  }\n`;\n\nexport interface ButtonProps {\n    id?: string | undefined,\n    autoFocus?: boolean | undefined;\n    disabled?: boolean | undefined;\n    className?: string | undefined,\n    children: ReactNode,\n    type?: 'submit' | 'reset' | 'button' | undefined;\n    onClick?: MouseEventHandler,\n    onChange?: FormEventHandler\n}\n\nconst Button = ({\n    id,\n    autoFocus,\n    className,\n    children,\n    disabled,\n    type,\n    onClick,\n    onChange\n}: ButtonProps) => {\n    return (\n        <StyledButton\n            autoFocus={autoFocus}\n            className={className}\n            id={id}\n            type={type}\n            onChange={onChange}\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </StyledButton>\n    );\n};\n\nButton.defaultProps = {\n};\n\nexport { Button };","import React from 'react';\nimport styled from 'styled-components';\n\nenum HeadingType {\n    H1 = \"h1\",\n    H2 = \"h2\",\n    H3 = \"h3\",\n    H4 = \"h4\",\n    H5 = \"h5\",\n    H6 = \"h6\",\n    Paragraph = \"p\",\n}\n\ninterface StyledTypeProps {\n    children: string\n};\n\ninterface TypographyProps {\n    type: HeadingType\n    content: string\n}\n\nconst StyledH1: React.FC<StyledTypeProps> = styled.h1`  \n    font-size: ${(props) => props.theme.fonts.size.h1};\n`;\n\nconst StyledH2: React.FC<StyledTypeProps> = styled.h2`  \n    font-size: ${(props) => props.theme.fonts.size.h2};\n`;\n\nconst StyledH3: React.FC<StyledTypeProps> = styled.h3`  \n    font-size: ${(props) => props.theme.fonts.size.h3};\n`;\n\nconst StyledH4: React.FC<StyledTypeProps> = styled.h4`  \n    font-size: ${(props) => props.theme.fonts.size.h4};\n`;\n\nconst StyledH5: React.FC<StyledTypeProps> = styled.h5`  \n    font-size: ${(props) => props.theme.fonts.size.h5};\n`;\n\nconst StyledH6: React.FC<StyledTypeProps> = styled.h6`  \n    font-size: ${(props) => props.theme.fonts.size.h6};\n`;\n\nconst StyledP: React.FC<StyledTypeProps> = styled.p`  \n    font-size: ${(props) => props.theme.fonts.size.p};\n`;\n\nconst determineTypography = (type: HeadingType, content: string) => {\n    switch (type) {\n        case HeadingType.H1:\n            return <StyledH1>{content}</StyledH1>;\n        case HeadingType.H2:\n            return <StyledH2>{content}</StyledH2>;\n        case HeadingType.H3:\n            return <StyledH3>{content}</StyledH3>;\n        case HeadingType.H4:\n            return <StyledH4>{content}</StyledH4>;\n        case HeadingType.H5:\n            return <StyledH5>{content}</StyledH5>;\n        case HeadingType.H6:\n            return <StyledH6>{content}</StyledH6>;\n        case HeadingType.Paragraph:\n            return <StyledP>{content}</StyledP>;\n    }\n}\n\nconst Typography = ({\n    type,\n    content,\n}: TypographyProps) => {\n    return determineTypography(type, content);\n}\n\nTypography.defaultProps = {\n};\n\nexport { Typography, TypographyProps,  HeadingType };"],"names":[],"sourceRoot":""}