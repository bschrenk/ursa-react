{"version":3,"file":"components-Toast-Toast-stories.478babc5.iframe.bundle.js","mappings":";;;;;AAmEA;;AAEA;AACA;AACA;AAGA;ACtEA;;AAEA;;;;;;;;;;;;;;;;;AAiBA;;AAeA","sources":["webpack://ursa-react/./src/components/Toast/Toast.tsx","webpack://ursa-react/./src/components/Button/Button.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { DefaultTheme } from 'styled-components';\n\nenum ToastPosition {\n    TopLeft = 'top-left',\n    TopRight = 'top-right',\n    BottomLeft = 'bottom-left',\n    BottomRight = 'bottom-right',\n}\n\nenum ToastColor {\n    Primary = 'primary',\n    Secondary = 'secondary',\n}\n\ninterface ToastProps {\n    message: string;\n    duration?: number;\n    position?: ToastPosition;\n    color?: ToastColor;\n}\n\nconst getPositionStyles = (position: ToastPosition | undefined) => {\n    switch (position) {\n        case ToastPosition.TopLeft:\n            return `\n        top: 20px;\n        left: 20px;\n      `;\n        case ToastPosition.TopRight:\n            return `\n        top: 20px;\n        right: 20px;\n      `;\n        case ToastPosition.BottomLeft:\n            return `\n        bottom: 20px;\n        left: 20px;\n      `;\n        case ToastPosition.BottomRight:\n        default:\n            return `\n        bottom: 20px;\n        right: 20px;\n      `;\n    }\n};\n\nconst getColorStyles = (color: ToastColor | undefined, themeColors: DefaultTheme[string]) => {\n    switch (color) {\n        case ToastColor.Secondary:\n            return `\n        background-color: ${themeColors.secondary};\n      `;\n        case ToastColor.Primary:\n        default:\n            return `\n        background-color: ${themeColors.primary};\n      `;\n    }\n};\n\nconst ToastWrapper = styled.div<{ position?: ToastPosition; color?: ToastColor; isVisible: boolean }>`\n  position: fixed;\n  color: #fff;\n  padding: 10px 20px;\n  border-radius: 8px;\n  opacity: ${props => (props.isVisible ? '1' : '0')};\n  transition: opacity 0.3s ease-in-out;\n  pointer-events: ${props => (props.isVisible ? 'auto' : 'none')};\n  ${props => getPositionStyles(props.position)};\n  ${props => getColorStyles(props.color, props.theme.colors)};\n`;\n\nconst Toast: React.FC<ToastProps> = ({ message, duration = 3000, position = ToastPosition.BottomRight, color = ToastColor.Primary }) => {\n    const [isVisible, setIsVisible] = useState(true);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setIsVisible(false);\n        }, duration);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [duration]);\n\n    return (\n        <ToastWrapper isVisible={isVisible} position={position} color={color}>\n            {message}\n        </ToastWrapper>\n    );\n};\n\nexport { Toast, ToastProps, ToastPosition, ToastColor };","import React, { FormEventHandler, MouseEventHandler, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`  \n  background: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0)), ${(props) => props.theme.colors.primary};\n  border: none;\n  border-radius: ${(props) => props.theme.borderRadius};\n  color: #FFFFFF;\n  padding: .7rem 1.5rem;\n  cursor: pointer;\n  transition: background 1s;\n\n  &:focus-visible {\n      outline: 2px solid #101820;\n  }\n\n  &:disabled {\n      background-color: gray;\n      color: #FFFFFF;\n      border-color: gray;\n  }\n\n  &:hover:enabled {\n    background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)), ${(props) => props.theme.colors.primary};\n  }\n`;\n\nexport interface ButtonProps {\n    id?: string | undefined,\n    autoFocus?: boolean | undefined;\n    disabled?: boolean | undefined;\n    className?: string | undefined,\n    children: ReactNode,\n    type?: 'submit' | 'reset' | 'button' | undefined;\n    onClick?: MouseEventHandler,\n    onChange?: FormEventHandler\n}\n\nconst Button = ({\n    id,\n    autoFocus,\n    className,\n    children,\n    disabled,\n    type,\n    onClick,\n    onChange\n}: ButtonProps) => {\n    return (\n        <StyledButton\n            autoFocus={autoFocus}\n            className={className}\n            id={id}\n            type={type}\n            onChange={onChange}\n            onClick={onClick}\n            disabled={disabled}\n        >\n            {children}\n        </StyledButton>\n    );\n};\n\nButton.defaultProps = {\n};\n\nexport { Button };"],"names":[],"sourceRoot":""}