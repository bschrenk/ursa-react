{"version":3,"file":"components-Typography-Typography-stories.56b522fb.iframe.bundle.js","mappings":";AAuBA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAsBA","sources":["webpack://ursa-react/./src/components/Typography/Typography.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nenum HeadingType {\n    H1 = \"h1\",\n    H2 = \"h2\",\n    H3 = \"h3\",\n    H4 = \"h4\",\n    H5 = \"h5\",\n    H6 = \"h6\",\n    Paragraph = \"p\",\n}\n\ninterface StyledTypeProps {\n    children: string\n};\n\ninterface TypographyProps {\n    type: HeadingType\n    content: string\n}\n\nconst StyledH1: React.FC<StyledTypeProps> = styled.h1`  \n    font-size: ${(props) => props.theme.fonts.size.h1};\n`;\n\nconst StyledH2: React.FC<StyledTypeProps> = styled.h2`  \n    font-size: ${(props) => props.theme.fonts.size.h2};\n`;\n\nconst StyledH3: React.FC<StyledTypeProps> = styled.h3`  \n    font-size: ${(props) => props.theme.fonts.size.h3};\n`;\n\nconst StyledH4: React.FC<StyledTypeProps> = styled.h4`  \n    font-size: ${(props) => props.theme.fonts.size.h4};\n`;\n\nconst StyledH5: React.FC<StyledTypeProps> = styled.h5`  \n    font-size: ${(props) => props.theme.fonts.size.h5};\n`;\n\nconst StyledH6: React.FC<StyledTypeProps> = styled.h6`  \n    font-size: ${(props) => props.theme.fonts.size.h6};\n`;\n\nconst StyledP: React.FC<StyledTypeProps> = styled.p`  \n    font-size: ${(props) => props.theme.fonts.size.p};\n`;\n\nconst determineTypography = (type: HeadingType, content: string) => {\n    switch (type) {\n        case HeadingType.H1:\n            return <StyledH1>{content}</StyledH1>;\n        case HeadingType.H2:\n            return <StyledH2>{content}</StyledH2>;\n        case HeadingType.H3:\n            return <StyledH3>{content}</StyledH3>;\n        case HeadingType.H4:\n            return <StyledH4>{content}</StyledH4>;\n        case HeadingType.H5:\n            return <StyledH5>{content}</StyledH5>;\n        case HeadingType.H6:\n            return <StyledH6>{content}</StyledH6>;\n        case HeadingType.Paragraph:\n            return <StyledP>{content}</StyledP>;\n    }\n}\n\nconst Typography = ({\n    type,\n    content,\n}: TypographyProps) => {\n    return determineTypography(type, content);\n}\n\nTypography.defaultProps = {\n};\n\nexport { Typography, TypographyProps,  HeadingType };"],"names":[],"sourceRoot":""}